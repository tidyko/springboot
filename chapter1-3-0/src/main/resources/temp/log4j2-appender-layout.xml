<?xml version="1.0" encoding="UTF-8"?>


<Configuration name="baseConf" status="warn" monitorInterval="5">

<Properties>
<!--    2020-09-10 17:34:51,164  INFO Log4j2Controller:34 - *show log*-->
<!--    <Property name="pattern">%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n</Property>-->

<!--    20:25:23.591 [http-nio-8130-exec-1] INFO  com.goat.chapter130.Log4j2Controller - *show log*-->
    <Property name="pattern">%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n</Property>
</Properties>


<Appenders>

    <Console name="console" target="SYSTEM_OUT" follow="true">
        <PatternLayout>
            <Pattern>${pattern}</Pattern>
        </PatternLayout>
    </Console>

</Appenders>

<!--    <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" charset="UTF-8"/>

%c{参数} 或 %logger{参数}  ##输出日志名称
%logger 输出logger名称，因为Root Logger没有名称，所以没有输出
%C{参数} 或 %class{参数    ##输出类型
%d{参数}{时区te{参数}{时区} ##输出时间
%d{HH:mm:ss.SSS} 表示输出到毫秒的时间
%F|%file                  ## 输出所在的类文件名，如Client.java
highlight{pattern}{style} ##高亮显示
%l  ##输出错误的完整位置  包括类名、方法名、文件名、行数
%L  ##输出错误行号
%m 或 %msg 或 %message ##输出错误信息  日志文本
%M 或 %method ##输出所在方法名
%n            ##输出 换行
%level{参数1}{参数2}{参数3} ##输出日志的级别
%t 或 %thread      ## 输出当前线程名称


%-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0


-->

     <Loggers>
         <Root level="info">
             <AppenderRef ref="console"/>
         </Root>
     </Loggers>

 </Configuration>
