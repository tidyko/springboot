# 启动进程,通常设置成和 CPU 的数量相等  此值越大，则可以nginx可以支持的并发处理量就越多
worker_processes  1;
error_log  /var/log/nginx/error.log;

events {
  # epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式
  # 但是仅用于 linux2.6 以上内核,可以大大提高 nginx 的性能
  use epoll;
  # 单个后台 worker process 进程的最大并发链接数
  worker_connections  1024;
}

http {
  # 设定 mime 类型,类型由 mime.type 文件定义
  include       mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
 access_log  /var/log/nginx/access.log  main;
  # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
  # 必须设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的 uptime.
  sendfile        on;

  # 连接超时时间
  keepalive_timeout  25;
  # 设定请求缓冲
  client_header_buffer_size 2k;

 gzip  on;
    gzip_comp_level  5;
    gzip_min_length  1024;
    gzip_types   text/plain application/x-javascript text/css application/xml text/javascript  image/jpeg image/gif image/png;

 #将http重定向到https，解决修改为https后http无法访问的问题
  server {
  		listen 80;
  		server_name www.goatcoming.cn;
  		return 301 https://www.goatcoming.cn;
  	}

  # 配置虚拟主机
  server {
    listen       443;   # 监听的端口
    server_name  www.goatcoming.cn;  # 虚拟主机名称这里配置ip地址或者域名信息  #将server_name修改为您证书绑定的域名
    ssl on;
    index index.html;
    ssl_certificate   /etc/nginx/cert/4486669_www.goatcoming.cn.pem;
    ssl_certificate_key  /etc/nginx/cert/4486669_www.goatcoming.cn.key;
    ssl_session_timeout 5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    root  html;
    index index.html index.htm;
    # 所有的请求都以 / 开始，所有的请求都可以匹配此 location
    location / {
      proxy_pass http://47.98.148.84:8080;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

      # 解决 无法加载静态资源问题
     location ~ .*\.(js|css|jpg|png)$ {
      proxy_pass http://47.98.148.84:8080;
     }
  }

}

